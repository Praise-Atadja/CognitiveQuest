# -*- coding: utf-8 -*-
"""prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uNtHFP-dmTEeWqj07sqi8dQMsftB7h_h

# **PROJECT NAME: CognitiveQuest**
---
(***This project is to predict the possibility of autism***)

# **PREDICTIVE FUNCTION**
"""

#Import Necessary Libraries
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import classification_report
import joblib
from joblib import dump
import os
import xgboost as xgb
import pickle
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, log_loss, roc_auc_score, cohen_kappa_score, confusion_matrix
from xgboost import XGBClassifier
from sklearn.ensemble import AdaBoostClassifier
import preprocessing.py
import model.py

"""Selecting the best Model"""

def select_best_model(model_accuracies):
    """
    Selects the model with the highest accuracy from a dictionary of model accuracies.

    """
    # Select the model with the highest accuracy
    best_model_name = max(model_accuracies, key=model_accuracies.get)
    best_model_accuracy = model_accuracies[best_model_name]

    return best_model_name, best_model_accuracy


model_accuracies = {
    'Random Forest': 1.0,
    'Support Vector Classifier':1.0,
    'XGBoost Classifier': 1.0
}

best_model_name, best_model_accuracy = select_best_model(model_accuracies)
print(f"Best model: {best_model_name}, Accuracy: {best_model_accuracy}")

"""Predictive Function"""

# scaling function
def min_max_scale_numerical_features(features, features_numerical):
    scaler = MinMaxScaler()
    features_minmax_transform = pd.DataFrame(data=features)
    features_minmax_transform[features_numerical] = scaler.fit_transform(features[features_numerical])
    return features_minmax_transform

# encoding function
def encode_categorical_columns(features_minmax_transform):
    le = LabelEncoder()
    for column in features_minmax_transform.columns:
        if pd.api.types.is_numeric_dtype(features_minmax_transform[column]):
            continue
        features_minmax_transform[column] = le.fit_transform(features_minmax_transform[column])
    return features_minmax_transform

# Preprocess features function
def preprocess_features(input_data):
    features_numerical = ['age']  # Define numerical features
    input_data_scaled = min_max_scale_numerical_features(input_data, features_numerical)
    input_data_encoded = encode_categorical_columns(input_data_scaled)
    return input_data_encoded

# Load the Random Forest model from the pickle file
random_forest_model = joblib.load("../models/random_forest.pkl")

# Prediction function
def predict_input(random_forest_model):
    # Collect user input
    print("Please enter the following information:")
    A1_Score = int(input("A1 Score (0/1): "))
    A2_Score = int(input("A2 Score (0/1): "))
    A3_Score = int(input("A3 Score (0/1): "))
    A4_Score = int(input("A4 Score (0/1): "))
    A5_Score = int(input("A5 Score (0/1): "))
    A6_Score = int(input("A6 Score (0/1): "))
    A7_Score = int(input("A7 Score (0/1): "))
    A8_Score = int(input("A8 Score (0/1): "))
    A9_Score = int(input("A9 Score (0/1): "))
    A10_Score = int(input("A10 Score (0/1): "))
    age = int(input("Age: "))
    gender = input("Gender (Male/Female): ")
    ethnicity = input("Ethnicity: ")
    jaundice = input("Jaundice history (Yes/No): ")
    autism = input("Autism diagnosis (Yes/No): ")
    country_of_res = input("Country of residence: ")
    used_app_before = input("Used app before (Yes/No): ")
    relation = input("Relation (Health care professional/Others/Parent/Relative/Self): ")
    age_range = input("Age range (4-8/9-13/14-18/19-23/24-28/29-33/34-38/39-43/44-48/49-53/54-58/59-63): ")

    # Create a DataFrame from the user input
    input_data = pd.DataFrame({
        'A1_Score': [A1_Score],
        'A2_Score': [A2_Score],
        'A3_Score': [A3_Score],
        'A4_Score': [A4_Score],
        'A5_Score': [A5_Score],
        'A6_Score': [A6_Score],
        'A7_Score': [A7_Score],
        'A8_Score': [A8_Score],
        'A9_Score': [A9_Score],
        'A10_Score': [A10_Score],
        'age': [age],
        'gender': [gender],
        'ethnicity': [ethnicity],
        'jaundice': [jaundice],
        'autism': [autism],
        'country_of_res': [country_of_res],
        'used_app_before': [used_app_before],
        'relation': [relation],
        'age_range': [age_range]
    })


    # Preprocess the input data
    input_data_transformed = preprocess_features(input_data)

    # Make prediction
    prediction = model.predict(input_data_transformed)

    # Output the prediction
    print("Prediction: ", "Yes, ASD" if prediction == 1 else "No ASD")


predict_input(random_forest_model)